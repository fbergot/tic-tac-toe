// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function(modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x) {
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function(id, exports) {
    modules[id] = [
      function(require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function() {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function() {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"3KdSp":[function(require,module,exports) {
var HMR_HOST = null;
var HMR_PORT = 1234;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d751713988987e9331980363e24189ce";
module.bundle.HMR_BUNDLE_ID = "b9167a940929bdec77a4418224e1d95d";
// @flow
/*global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE*/
/*::
import type {
HMRAsset,
HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
(string): mixed;
cache: {|[string]: ParcelModule|};
hotData: mixed;
Module: any;
parent: ?ParcelRequire;
isParcelRequire: true;
modules: {|[string]: [Function, {|[string]: string|}]|};
HMR_BUNDLE_ID: string;
root: ParcelRequire;
}
interface ParcelModule {
hot: {|
data: mixed,
accept(cb: (Function) => void): void,
dispose(cb: (mixed) => void): void,
// accept(deps: Array<string> | string, cb: (Function) => void): void,
// decline(): void,
_acceptCallbacks: Array<(Function) => void>,
_disposeCallbacks: Array<(mixed) => void>,
|};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
*/
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || (function () {}));
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, /*: {|[string]: boolean|}*/
acceptedAssets, /*: {|[string]: boolean|}*/
/*: {|[string]: boolean|}*/
assetsToAccept;
function getHostname() {
  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
  return HMR_PORT || location.port;
}
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = getHostname();
  var port = getPort();
  var protocol = HMR_SECURE || location.protocol == 'https:' && !(/localhost|127.0.0.1|0.0.0.0/).test(hostname) ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');
  // $FlowFixMe
  ws.onmessage = function (event) /*: {data: string, ...}*/
  {
    checkedAssets = {
      /*: {|[string]: boolean|}*/
    };
    acceptedAssets = {
      /*: {|[string]: boolean|}*/
    };
    assetsToAccept = [];
    var data = /*: HMRMessage*/
    JSON.parse(event.data);
    if (data.type === 'update') {
      // Remove error overlay if there is one
      removeErrorOverlay();
      let assets = data.assets.filter(asset => asset.envHash === HMR_ENV_HASH);
      // Handle HMR Update
      var handled = false;
      assets.forEach(asset => {
        var didAccept = asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
        if (didAccept) {
          handled = true;
        }
      });
      if (handled) {
        console.clear();
        assets.forEach(function (asset) {
          hmrApply(module.bundle.root, asset);
        });
        for (var i = 0; i < assetsToAccept.length; i++) {
          var id = assetsToAccept[i][1];
          if (!acceptedAssets[id]) {
            hmrAcceptRun(assetsToAccept[i][0], id);
          }
        }
      } else {
        window.location.reload();
      }
    }
    if (data.type === 'error') {
      // Log parcel errors to console
      for (let ansiDiagnostic of data.diagnostics.ansi) {
        let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
        console.error('ðŸš¨ [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
      }
      // Render the fancy html overlay
      removeErrorOverlay();
      var overlay = createErrorOverlay(data.diagnostics.html);
      // $FlowFixMe
      document.body.appendChild(overlay);
    }
  };
  ws.onerror = function (e) {
    console.error(e.message);
  };
  ws.onclose = function (e) {
    if (undefined !== 'test') {
      console.warn('[parcel] ðŸš¨ Connection to the HMR server was lost');
    }
  };
}
function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);
  if (overlay) {
    overlay.remove();
    console.log('[parcel] âœ¨ Error resolved');
  }
}
function createErrorOverlay(diagnostics) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID;
  let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
  for (let diagnostic of diagnostics) {
    let stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
    errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          ðŸš¨ ${diagnostic.message}
        </div>
        <pre>
          ${stack}
        </pre>
        <div>
          ${diagnostic.hints.map(hint => '<div>' + hint + '</div>').join('')}
        </div>
      </div>
    `;
  }
  errorHTML += '</div>';
  overlay.innerHTML = errorHTML;
  return overlay;
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]>*/
{
  var modules = bundle.modules;
  if (!modules) {
    return [];
  }
  var parents = [];
  var k, d, dep;
  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];
      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push([bundle, k]);
      }
    }
  }
  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }
  return parents;
}
function updateLink(link) {
  var newLink = link.cloneNode();
  newLink.onload = function () {
    if (link.parentNode !== null) {
      // $FlowFixMe
      link.parentNode.removeChild(link);
    }
  };
  newLink.setAttribute('href', // $FlowFixMe
  link.getAttribute('href').split('?')[0] + '?' + Date.now());
  // $FlowFixMe
  link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
  if (cssTimeout) {
    return;
  }
  cssTimeout = setTimeout(function () {
    var links = document.querySelectorAll('link[rel="stylesheet"]');
    for (var i = 0; i < links.length; i++) {
      // $FlowFixMe[incompatible-type]
      var href = /*: string*/
      links[i].getAttribute('href');
      var hostname = getHostname();
      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
      var absolute = (/^https?:\/\//i).test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;
      if (!absolute) {
        updateLink(links[i]);
      }
    }
    cssTimeout = null;
  }, 50);
}
function hmrApply(bundle, /*: ParcelRequire*/
asset) /*:  HMRAsset*/
{
  var modules = bundle.modules;
  if (!modules) {
    return;
  }
  if (asset.type === 'css') {
    reloadCSS();
    return;
  }
  let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
  if (deps) {
    var fn = new Function('require', 'module', 'exports', asset.output);
    modules[asset.id] = [fn, deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}
function hmrAcceptCheck(bundle, /*: ParcelRequire*/
id, /*: ParcelRequire*/
/*: string*/
depsByBundle) /*: ?{ [string]: { [string]: string } }*/
{
  var modules = bundle.modules;
  if (!modules) {
    return;
  }
  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
    // If we reached the root bundle without finding where the asset should go,
    // there's nothing to do. Mark as "accepted" so we don't reload the page.
    if (!bundle.parent) {
      return true;
    }
    return hmrAcceptCheck(bundle.parent, id, depsByBundle);
  }
  if (checkedAssets[id]) {
    return;
  }
  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);
  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }
  return getParents(module.bundle.root, id).some(function (v) {
    return hmrAcceptCheck(v[0], v[1], null);
  });
}
function hmrAcceptRun(bundle, /*: ParcelRequire*/
id) /*: string*/
{
  var cached = bundle.cache[id];
  bundle.hotData = {};
  if (cached && cached.hot) {
    cached.hot.data = bundle.hotData;
  }
  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }
  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];
  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      var assetsToAlsoAccept = cb(function () {
        return getParents(module.bundle.root, id);
      });
      if (assetsToAlsoAccept && assetsToAccept.length) {
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
      }
    });
  }
  acceptedAssets[id] = true;
}

},{}],"71k5j":[function(require,module,exports) {
var _params_and_initCanvasJs = require('./params_and_init/Canvas.js');
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
var _params_and_initCanvasJsDefault = _parcelHelpers.interopDefault(_params_and_initCanvasJs);
var _params_and_initUtilitaryJs = require("./params_and_init/Utilitary.js");
var _params_and_initUtilitaryJsDefault = _parcelHelpers.interopDefault(_params_and_initUtilitaryJs);
var _params_and_initGameJs = require('./params_and_init/Game.js');
var _params_and_initGameJsDefault = _parcelHelpers.interopDefault(_params_and_initGameJs);
var _params_and_initGetItemJs = require('./params_and_init/GetItem.js');
var _params_and_initGetItemJsDefault = _parcelHelpers.interopDefault(_params_and_initGetItemJs);
const urls = ["index.html", "game.html"];
// init canvas :
const canvas = new _params_and_initCanvasJsDefault.default('canvas');
canvas.make_grid();
// try get items in localeStorage
let beginItem;
try {
  beginItem = _params_and_initGetItemJsDefault.default.getStartPlayer();
} catch (e) {
  console.error(e);
  // default value :
  beginItem = 'x';
}
let pathItems;
try {
  pathItems = _params_and_initGetItemJsDefault.default.img_according_localStorage();
  ;
} catch (err) {
  console.error(err);
  // default value :
  pathItems = ["../img/true.png", "../img/false.png"];
}
// init data game with items in localStorage and instance of canvas :
const game = new _params_and_initGameJsDefault.default(pathItems, canvas, beginItem, _params_and_initUtilitaryJsDefault.default);
_params_and_initUtilitaryJsDefault.default.add_event(document.getElementById("options"), () => void window.location.assign(urls[0]));
_params_and_initUtilitaryJsDefault.default.add_event(document.getElementById("reload"), () => void window.location.assign(urls[1]));
_params_and_initUtilitaryJsDefault.default.add_event(canvas.canvas, e => void game.analyze_click_position(e, canvas.range));

},{"./params_and_init/Canvas.js":"62YVn","./params_and_init/Utilitary.js":"6enBN","./params_and_init/Game.js":"BEvmk","./params_and_init/GetItem.js":"5WICK","@parcel/transformer-js/lib/esmodule-helpers.js":"5gA8y"}],"62YVn":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
class Canvas {
  /**
  *Creates an instance of Canvas.
  * @param {String} id
  * @constructor
  */
  constructor(id_canvas) {
    // init canvas and context 2d
    this.canvas = document.getElementById(id_canvas);
    this.ctx = this.canvas.getContext('2d');
    this.canvas.width = innerHeight * 0.6;
    this.canvas.height = innerHeight * 0.6;
    this.width_canvas = this.canvas.width;
    this.height_canvas = this.canvas.height;
    this.step_w = this.width_canvas / 3;
    this.step_h = this.height_canvas / 3;
    // for make the grid and know the part clicked in canvas (1-9)
    this.range = {
      1: {
        x: [0, 1 * this.step_w],
        y: [0, 1 * this.step_h]
      },
      2: {
        x: [1 * this.step_w, 2 * this.step_w],
        y: [0, 1 * this.step_h]
      },
      3: {
        x: [2 * this.step_w, 3 * this.step_w],
        y: [0, 1 * this.step_h]
      },
      4: {
        x: [0, 1 * this.step_w],
        y: [1 * this.step_h, 2 * this.step_h]
      },
      5: {
        x: [1 * this.step_w, 2 * this.step_w],
        y: [1 * this.step_h, 2 * this.step_h]
      },
      6: {
        x: [2 * this.step_w, 3 * this.step_w],
        y: [1 * this.step_h, 2 * this.step_h]
      },
      7: {
        x: [0, 1 * this.step_w],
        y: [2 * this.step_h, 3 * this.step_h]
      },
      8: {
        x: [1 * this.step_w, 2 * this.step_w],
        y: [2 * this.step_h, 3 * this.step_h]
      },
      9: {
        x: [2 * this.step_w, 3 * this.step_w],
        y: [2 * this.step_h, 3 * this.step_h]
      }
    };
  }
  /**
  * Make the grid of game
  */
  make_grid() {
    this.ctx.beginPath();
    // grid in X
    for (let i = 0; i < 2; i++) {
      this.ctx.moveTo(this.step_w, 0);
      this.ctx.lineTo(this.step_w, this.height_canvas);
      this.step_w += this.step_w;
    }
    // grid in Y
    for (let i = 0; i < 2; i++) {
      this.ctx.moveTo(0, this.step_h);
      this.ctx.lineTo(this.width_canvas, this.step_h);
      this.step_h += this.step_h;
    }
    this.ctx.stroke();
  }
}
exports.default = Canvas;

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"5gA8y"}],"5gA8y":[function(require,module,exports) {
"use strict";

exports.interopDefault = function (a) {
  return a && a.__esModule ? a : {
    default: a
  };
};

exports.defineInteropFlag = function (a) {
  Object.defineProperty(a, '__esModule', {
    value: true
  });
};

exports.exportAll = function (source, dest) {
  Object.keys(source).forEach(function (key) {
    if (key === 'default' || key === '__esModule') {
      return;
    } // Skip duplicate re-exports when they have the same value.


    if (key in dest && dest[key] === source[key]) {
      return;
    }

    Object.defineProperty(dest, key, {
      enumerable: true,
      get: function () {
        return source[key];
      }
    });
  });
  return dest;
};

exports.export = function (dest, destName, get) {
  Object.defineProperty(dest, destName, {
    enumerable: true,
    get: get
  });
};
},{}],"6enBN":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
class Utilitary {
  /**
  * Randomize an Array
  * @param {Array} array
  * @returns {Array}
  */
  static randomize_array(array) {
    let i, j;
    for (i = 0; i < array.length; i++) {
      j = Math.floor(Math.random() * (i + 1));
      [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
  }
  /**
  * Make image with path
  * @param {String} path
  * @returns {String} img string for HTML
  */
  static init_img_from_path(path) {
    return `<img width='60px' height='60px'  src=${path} >`;
  }
  /**
  * Verify if case is empty or not
  * @param {String} n_case
  * @param {Array<undefined|string>} gameState
  * @returns {Boolean}
  */
  static verify_previously_play(n_case, gameState) {
    if (gameState[n_case - 1] !== undefined) {
      return false;
    }
    return true;
  }
  /**
  * Generate button
  * @param {String} className class HTML
  * @param {String} message_button message on the button
  * @param {String} id_button
  * @return {String} string of button HTML
  **/
  static generate_button_for_alert_message(className, message_button, id_button) {
    return `<button type='button' class=${className} id=${id_button}>${message_button}</button>`;
  }
  /**
  * Give one EventListener for one element HTML
  * @param {HTMLElement} element
  * @param {Function} callback
  */
  static add_event(element, callback) {
    element.addEventListener("click", callback);
  }
}
exports.default = Utilitary;

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"5gA8y"}],"BEvmk":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
class Game {
  /**
  * Create an instance of Game
  * @constructor
  * @param {Array<String>} array_path_img
  * @param {Canvas} canvas_instance instance of Canvas injection Class
  * @param {String} startPlayer string for starting player
  * @param {Utilitary} instance of Utilitary injection Class
  */
  constructor(array_path_img, canvas_instance, startPlayer, utilitary) {
    this.paths = array_path_img;
    this.canvas = canvas_instance;
    this.startPlayer = startPlayer;
    this.utilitary = utilitary;
    this.img_and_data = null;
    this.$ = tag => document.querySelector(tag);
    this.current_player = startPlayer;
    this.no_winner_message = ["C'est une partie nulle !", "Personne ne gagne !", "Ni l'un ni l'autre ne se dÃ©marque !", "Pas de gagnant !"];
    this.ctx = this.canvas.ctx;
    this.winner = undefined;
    /** GLOBAL GAME STATE*/
    this.game_state = new Array(9);
    this.winnerPosition = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 4, 7], [2, 5, 8], [3, 6, 9], [1, 5, 9], [3, 5, 7]];
    // auto play if startPlayer is "o" : (p1) in localStorage
    if (this.startPlayer === "o") {
      this.ia();
    }
  }
  /**
  * Find the case according to the coords of click in canvas
  * @param {Event} e
  * @param {Object} range
  */
  analyze_click_position(e, range) {
    // loop on all data for deduce what case is clicked from range (data)
    for (let rang in range) {
      if (e.offsetX >= range[rang].x[0] && e.offsetX <= range[rang].x[1] && e.offsetY >= range[rang].y[0] && e.offsetY <= range[rang].y[1]) {
        // verify if case is empty
        if (this.utilitary.verify_previously_play(rang, this.game_state)) {
          // insert image and toogle player
          this.insert_img_according_to_player(range[rang], this.current_player = this.toogle_player(this.current_player), this.paths[0], this.paths[1]);
          // update this.game_state array
          this.game_state_change(rang, this.game_state, this.current_player);
          // update the game state
          if (this.current_player !== this.toogle_player(this.current_player)) {
            this.ia();
          }
          break;
        } else {
          this.alert_message(["Vous ne pouvez pas jouer cette case !", "alert"], ["replay_button", "ok", "okay"]);
          break;
        }
      }
    }
  }
  /**
  * Send all good params for display images players
  * @param {Object} data
  * @param {String} current_player
  * @param {String} path1
  * @param {String} path2
  */
  insert_img_according_to_player(data, current_player, path1, path2) {
    const [x, y] = [data.x, data.y];
    if (current_player === "x") {
      this.display_img(path1, x, y, this.ctx);
    } else {
      this.display_img(path2, x, y, this.ctx);
    }
  }
  /**
  * Toogle current player
  * @param {String} player_current (this.player_current)
  * @return {String} !player_current
  */
  toogle_player(player_current) {
    if (this.winner === undefined) {
      return player_current === "x" ? "o" : "x";
    } else {
      return player_current;
    }
  }
  /**
  * Display image according to player
  * @param {String} path path for image
  * @param {Array<Number>} coordX
  * @param {Array<Number>} coordY
  * @param {CanvasRenderingContext2D} ctx
  */
  display_img(path, coordX, coordY, ctx) {
    const img = new Image();
    img.addEventListener("load", function (e) {
      ctx.drawImage(img, coordX[0] + 1, coordY[0] + 1, coordX[1] - coordX[0] - 2, coordY[1] - coordY[0] - 2);
    });
    img.src = path;
  }
  /**
  * Insert a data in array game_state
  * @param {Number} number_case
  * @param {Array} array
  * @param {String} player
  */
  game_state_change(number_case, array, player) {
    array.splice(number_case - 1, 1, player);
    if (this.analyse_state(this.game_state)[0]) {
      this.winner = true;
      if (this.current_player === "x") {
        this.img_and_data = {
          img: this.utilitary.init_img_from_path(this.paths[0]),
          player: this.current_player === "x" ? 'Player 1' : 'Player 2'
        };
      } else {
        this.img_and_data = {
          img: this.utilitary.init_img_from_path(this.paths[1]),
          player: this.current_player === "x" ? 'Player 1' : 'Player 2'
        };
      }
      /**prettier-ignore*/
      this.alert_message([`C'est ${this.img_and_data.img} qui a gagnÃ© ! (${this.img_and_data.player})`, 'alert'], ["replay_button", "Rejouer", "replay"]);
    }
  }
  /**
  * Analyse gameState for understand if winner-position and attribute digital values
  * @param {Array} array
  * @return {Array<Boolean & Number>}
  */
  analyse_state(array) {
    let i;
    for (i = 0; i < this.winnerPosition.length; i++) {
      if (array[this.winnerPosition[i][0] - 1] === "x" && array[this.winnerPosition[i][1] - 1] === "x" && array[this.winnerPosition[i][2] - 1] === "x") {
        return [true, 10];
      } else if (array[this.winnerPosition[i][0] - 1] === "o" && array[this.winnerPosition[i][1] - 1] === "o" && array[this.winnerPosition[i][2] - 1] === "o") {
        return [true, 0];
      }
    }
    return [false, -10];
  }
  /**
  * Display message and button
  * @param {Array<String>} arrayParamForDiv_content message and class for the div in the div_content
  * @param {Array<String>} arrayParamForButton params for create the button with good classname , button-message and id
  */
  alert_message(arrayParamForDiv_content, arrayParamForButton) {
    if (this.$('.alert_content') === null) {
      const parent = this.$("#body");
      const div_content = document.createElement("div");
      div_content.classList.add("alert_content");
      // prettier-ignore
      div_content.innerHTML = `<div class=${arrayParamForDiv_content[1]}>${arrayParamForDiv_content[0]}</div>
                ${this.utilitary.generate_button_for_alert_message(arrayParamForButton[0], arrayParamForButton[1], arrayParamForButton[2])}`;
      parent.appendChild(div_content);
      // listener for button #okay :
      if (this.$("#okay") !== null) {
        this.utilitary.add_event(this.$("#okay"), () => void parent.removeChild(div_content));
      }
      if (this.$("#replay") !== null) {
        this.utilitary.add_event(this.$("#replay"), () => {
          window.location.reload();
        });
      }
    }
  }
  /**
  * Function analyze and play for the machine (ia) and display random no_winner_message[] if need
  */
  ia() {
    // copy gameState
    const copy_game_state = this.game_state.slice();
    const positions = [];
    // changer ce comportement pour chnger qui commence
    let curPlay = this.startPlayer;
    /**
    * Recursive function for analyse positions (player 1 - player 2)
    * @param {Number} step
    */
    const loop = step => {
      let obj;
      let i;
      for (i = 0; i < copy_game_state.length; i++) {
        if (copy_game_state[i] == undefined) {
          copy_game_state[i] = curPlay;
          obj = {
            case: i + 1,
            data: this.analyse_state(copy_game_state)[1]
          };
          positions.push(obj);
          copy_game_state[i] = undefined;
        }
      }
      curPlay = this.toogle_player(this.startPlayer);
      if (step < 2) {
        loop(step + 1);
      }
    };
    loop(1);
    if (positions.length > 0) {
      this.display_ia(positions);
    } else {
      /**prettier-ignore*/
      this.alert_message([`${this.no_winner_message[Math.floor(Math.random() * this.no_winner_message.length)]}`, 'alert'], ["replay_button", "Refaire une partie", "replay"]);
    }
  }
  /**
  * Choice one case according to best value in (-10 , 0 , 10)
  * @param {Array<object>} array_positions
  */
  display_ia(array_positions) {
    this.utilitary.randomize_array(array_positions);
    let max = -10, play;
    for (let value of array_positions) {
      if (value.data >= max) {
        max = value.data;
        play = value;
      }
    }
    const obj_coord = this.canvas.range[play.case];
    // call the function for display , toogle and update the game_state
    if (this.winner === undefined) {
      /** prettier-ignore*/
      this.insert_img_according_to_player(obj_coord, this.current_player = this.toogle_player(this.current_player), this.paths[0], this.paths[1]);
      this.game_state_change(play.case, this.game_state, this.current_player);
    }
    // if null position :
    if (array_positions.length === 2) {
      /**prettier-ignore*/
      this.alert_message([`${this.no_winner_message[Math.floor(Math.random() * this.no_winner_message.length)]}`, 'alert'], ["replay_button", "Refaire une partie", "replay"]);
    }
  }
}
exports.default = Game;

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"5gA8y"}],"5WICK":[function(require,module,exports) {
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
class GetItem {
  /**
  * Return array with good paths according to items in localStorage
  * @throw Error if item not available in localStorage
  * @return {Array<String>} array path of images
  */
  static img_according_localStorage() {
    const array_path = [];
    let i;
    const obj_path = {
      img1: '../img/manette.png',
      img2: '../img/true.png',
      img3: '../img/mort.png',
      img4: '../img/carre.png',
      img5: '../img/false.png',
      img6: '../img/child.png'
    };
    for (i = 1; i < 3; i++) {
      const item = window.localStorage.getItem(`player${i}`);
      if (item === null) {
        throw new Error("Un probleme est survenu dans la rÃ©cupÃ©ration des items dans le localStorage (img)");
      }
      array_path.push(obj_path[item]);
    }
    return array_path;
  }
  /**
  *
  * @returns player
  * @throw Error if item not available in localStorage
  */
  static getStartPlayer() {
    const data = {
      p1: 'o',
      p2: 'x'
    };
    const getPlayer = window.localStorage.getItem('begin');
    if (getPlayer) {
      return data[getPlayer];
    } else {
      throw new Error('Aucun "begin" item dans le localStorage');
    }
  }
}
exports.default = GetItem;

},{"@parcel/transformer-js/lib/esmodule-helpers.js":"5gA8y"}]},["3KdSp","71k5j"], "71k5j", "parcelRequire34c5")

//# sourceMappingURL=game.HASH_REF_b9167a940929bdec77a4418224e1d95d.js.map
