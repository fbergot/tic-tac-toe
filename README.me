Game tic-tac-toe

Le jeu bien connu du morpion.Le programme analyse les positions donne une valeur numérique aux cases afin de choisir comment jouer.Le tout a été bundlé avec parcel et donc pour pouvoir le faire fonctionner il faut se servir des fichiers index.html et game.html présents dans le dossier dist.

--Note : Dans les fichiers html source(avant le bundle) le script comporté l'attribut type="module" afin de faire fonctionner le projet avant bundle avec les imports es6.
Cet attribut a été supprimé pour effectuer le bundle avec parcel. 
Bonne chance !

            		  ***-   Un Mini-game fabriqué par F.B le 15-Avril -2021.  -***

#-1)-- Fonctionnement du Jeux :


Le jeu peut fonctionner avec deux modes prédéfinis: *-le 1er mode est un mode ou la machine joue avec le player humain en commençant. Biensur, si on le désire, nous-pouvons également jouer avec l'ordinateur et choisir de vouloir commencer, et cela dès le départ de la partie.

Une amélioration sensible m'est venue en tête : Créer une option permettant un choix randomizé du player qui commence...

J'ai réalisé l'option qui permet de définir qui commence dans le menu d'entrée du jeu, afin de le rendre moins ennuiyeux après quelques parties.

D'ailleurs, si une personne sur mon Github veut créer une requête de tirage pour créer la "feature" bien que le faire ne me pose absolument aucun problème, je m'engage à la regarder, pour eventuellement venir la merge à mon petit bout de jeu. Voilà Merci !! :]

Ensuite, chaque joueur joue une case afin d'essayer d'alligner 3 cases de même couleurs, selon celles choisient par les joueurs. Biensûr, j'ai bloqué la possibilité de pouvoir rejouer un jeton déjà déposé pour un joueur, sinon cela n'aurait pas eu grands intérêts.


#-2)-- Fonctionnement de mon algorithme, la détermination des positions gagnantes ainsi que l'anticipation des positions.
 	

** Considérons un quadrillage de 9 cases représentant l'espace bi-dimentionnel du jeu :
                                               
** Voilà un tableau de tableaux de toutes les possibilitées gagnantes dans le jeu. Cela est important car on pourra s'en servir pour que l'algo en déduise les positions gagnantes, perdantes, ou neutres.
						
----------|----------|----------|
|	  |          |          |
|    1    |      2   |     3 	|             
|         |          |          |                      
|---------|----------|----------|
| 	  |          |          |
|    4    |     5    |     6    |   	 
|	  |          |          |
|---------|----------|----------|
|	  |	     |	        |
|    7    | 	8    |     9    | 				
|         |	     |	        |
|---------|----------|----------|


#-3)-- Afin de vous donnez une idée plus concrète de la manière dont j'ai codé le mini jeu, voilà quelques clés essentielles pour 	     comprendre mon parti pris :


        a}-- Pour plus de modularité dans le code, j'ai utilisé des classes ES6 pour fabriquer ce jeu en Objets.
        #-4 Des classes pour chacunes leurs fonctions logiques : -Une pour la fabrication du Canvas HTML5 (incluant le quadrillage du jeu, qui inclut aussi la taille des cases dans le Canvas qui permettrons de savoir plus tard dans le jeu quelles cases ont été cliquées, cela grâce à leurs coordonnées en x et y dans le dit Canvas.


#-5 La class principal, le "moteur du jeu en lui même : Cela est un peu fastidieux à détailler donc je vous invite à regarder le code vous même : c'est la méthode ia() qui affecte une valeur numérique aux cases afin que la machine puisse savoir quelle cases elle doit jouer.Malin non ??



#-6 Il reste 2 class , une tournée vers les utilitaires du programme et l'autre récupère les items dans le localStorage du browser pour les images qui ont été sélectionnées dans la page index.html, le menu, (pour le transfère d'une page à l'autre des images choisis).




      